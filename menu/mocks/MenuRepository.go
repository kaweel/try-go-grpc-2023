// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	menu "try-go-grpc/menu"

	mock "github.com/stretchr/testify/mock"
)

// MenuRepository is an autogenerated mock type for the MenuRepository type
type MenuRepository struct {
	mock.Mock
}

// ListBeers provides a mock function with given fields:
func (_m *MenuRepository) ListBeers() ([]menu.Beer, error) {
	ret := _m.Called()

	var r0 []menu.Beer
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]menu.Beer, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []menu.Beer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]menu.Beer)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMenuRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMenuRepository creates a new instance of MenuRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMenuRepository(t mockConstructorTestingTNewMenuRepository) *MenuRepository {
	mock := &MenuRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
